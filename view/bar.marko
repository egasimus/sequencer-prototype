static const d3 = require('d3')
static const X_FACTOR = 25
static const Y_FACTOR = 33.3

class {

  onCreate () {

    this.state = {
      notes: require('../data/drums.js'),
      axisX: d3.scaleLinear().domain([0,   1]).range(['0%', '25%']),
      axisY: d3.scaleLinear().domain([127, 0]).range(['0%', '100%']),
    }

    console.log(this.state.notes)

  }

  getPosition ({ x, y, playhead }) {
    return {
      x: X_FACTOR * (x - playhead) + '%',
      y: 0 //Y_FACTOR * y + '%'
    }
  }

  getSize () {}

  gridLines () {
    return [...Array(3)].map((_, i)=>(i+1)/4)
  }

  gridLine (i) {
    const x = this.state.axisX(i)
    return {
      stroke: (i === 0) ? '#333' : '#222',
      x1: x,
      x2: x,
      y1: '0%',
      y2: '100%'
    }
  }

  noteLines () {
    return [...Array(11)].map((_,i)=>i*12)
  }

  noteLine (i) {
    return {
      x1: this.state.axisX(0),
      x2: this.state.axisX(1),
      y1: this.state.axisY(i),
      y2: this.state.axisY(i),
      stroke: '#555'
    }
  }

  note ([t, i]) {
    const x = this.state.axisX(t)
    const y = this.state.axisY(i)
    return {
      fill: 'black',
      stroke: 'white',
      x: x,
      y: y,
      width: '1%',
      height: '1%'
    }
  }

  background ({ x }) {
    return {
      x: this.state.axisX(0),
      y: this.state.axisY(127),
      width: this.state.axisX(1),
      height: this.state.axisY(0),
      stroke: (x === 2) ? '#ff0' : '#ddd',
      'stroke-width': (x === 2) ? '2' : '1',
      fill: 'transparent'
    }
  }

}

svg.Bar ${component.getPosition(input)}
  g.BarContents
    line.TimeGridLine for (i in component.gridLines()) ${component.gridLine(i)}
    line.NoteGridLine for (i in component.noteLines()) ${component.noteLine(i)}
    rect ${component.background(input)}
    g.Section
      rect.Note for (i in state.notes) ${component.note(i)}
